// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
//import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
library SafeMath {
   
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
//import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
//import "../IERC20.sol";
interface IERC20 {
   event Transfer(address indexed from, address indexed to, uint256 value);
   event Approval(address indexed owner, address indexed spender, uint256 value);
   function totalSupply() external view returns (uint256);
   function balanceOf(address account) external view returns (uint256);
   function transfer(address to, uint256 amount) external returns (bool);
   function allowance(address owner, address spender) external view returns (uint256);
   function approve(address spender, uint256 amount) external returns (bool);
   function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}
//import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}
//import "@openzeppelin/contracts/utils/Context.sol";
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
 

contract ERC20 is Context, IERC20, IERC20Metadata {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    address admin;
    // address public WalletA = 0x0cFdaE55547Ea5a07Ac39556a93536Bc647C2825; //hardcoded 5 wallets or could have been taken as input
    
    //require(WalletA == msg.sender,"wrong account")
    struct walletDetails {
        address wallet;
        uint256 remainingTokens;
    }
   
    // walletDetails public walB = walletDetails ({
    //     wallet : 0x3BFf7C3A0ff531bFb55512F71A516dF3eDeF809c,
    //     remainingTokens : _totalSupply * 50 / 100 * 10/100
    // });
    


    mapping (string => walletDetails ) wallets ;


    modifier onlyAdmin{
        require(admin == msg.sender,"invalid address");
        _;
    }


constructor(string memory name_, string memory symbol_,uint256 totalSupply_) {

        _name = name_;
        _symbol = symbol_;
        admin = msg.sender;

        walletDetails storage walA = wallets["A"];
        walletDetails storage walB = wallets["B"];
        walletDetails storage walC = wallets["C"];
        walletDetails storage walD = wallets["D"];
        walletDetails storage walE = wallets["E"];

        walA.wallet = 0x0cFdaE55547Ea5a07Ac39556a93536Bc647C2825;
        walA.remainingTokens = _totalSupply.mul(5).div(100);
        walB.wallet = 0x3BFf7C3A0ff531bFb55512F71A516dF3eDeF809c;
        walB.remainingTokens = _totalSupply.mul(5).div(100);
        walC.wallet = 0x4C69f9c36C107A9a358Bdc0E78a3606bE71099D5;
        walC.remainingTokens = _totalSupply.mul(5).div(100);
        walD.wallet = 0x65Db3dAA02C7278453e8f36E4d5E1811eB0FF6A8;
        walD.remainingTokens = _totalSupply.mul(5).div(100);
        walE.wallet = 0x66e7eF3A63cA4eBf466707F338C8fED636fc6d0E;
        walE.remainingTokens = _totalSupply.mul(5).div(100);

        _mint(address(this), totalSupply_.mul(50).div(100));
        _mint( walA.wallet, totalSupply_.mul(5).div(100)); //transferring tokens from smartcontract wallet to rest
        _mint( walB.wallet, totalSupply_.mul(5).div(100));
        _mint( walC.wallet, totalSupply_.mul(10).div(100));
        _mint( walD.wallet, totalSupply_.mul(10).div(100));
        _mint( walE.wallet, totalSupply_.mul(20).div(100));

    }




    function name() public view virtual override returns (string memory) {

        return _name;
    }

    function symbol() public view virtual override returns (string memory) {

        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {

        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {

        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {

        return _balances[account];
    }

//Setting new addresses for walletsA,B,C,D,E function
    function setAddressA (address _addressA) public onlyAdmin virtual returns (bool) {
        walletDetails storage walA = wallets["A"];
        walA.wallet = _addressA ;
        return true;
     }
    function setAddressB (address _addressB) public onlyAdmin virtual returns (bool) {
        walletDetails storage walB = wallets["B"];
        walB.wallet = _addressB ;
        return true;
     }
     function setAddressC (address _addressC) public onlyAdmin virtual returns (bool) {
        walletDetails storage walC = wallets["C"];
        walC.wallet = _addressC ;
        return true;
     }
     function setAddressD (address _addressD) public onlyAdmin virtual returns (bool) {
        walletDetails storage walD = wallets["D"];
        walD.wallet = _addressD ;
        return true;
     }
     function setAddressE (address _addressE) public onlyAdmin virtual returns (bool) {
        walletDetails storage walE = wallets["E"];
        walE.wallet = _addressE ;
        return true;
     }
    


    // function setAddressE (address _addressE) public onlyAdmin virtual returns (bool) {
    //     //_transfer(WalletE,_addressE,_balances[WalletE]);
    //     walE.wallet = _addressE ;
    //     return true;
    // }

//Withdraw function

    function withdraw(string memory addr,uint256 amount) public returns (bool){
        walletDetails storage wallet = wallets[addr];
        require( wallet.wallet == msg.sender,"wrong address" );
        require( wallet.remainingTokens <= amount,"amount is large");
        transfer(msg.sender,amount);
        wallet.remainingTokens -= amount;
        return true;
        
    }

    // function withdraw(uint256 amount) public  returns (bool) {
    //     if( WalletA == msg.sender ){
    //     require( _balances[WalletA] + limit  <= (maxvalueafterinitialtransfer * 2) );   //only 10% to be allowed of remaining total supply of tokens
    //     //address owner = _msgSender();//so max walletA hold = initial 5%(of total supply) + later 10%( of remaining supply)
    //     _transfer(address(this), WalletA, limit);//if 100 tokens as total supply then A can have = 5(5% of TS)+5(10% of remaining 50 tokens)=10Tokens max
    //     return true;
    //     }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

 

//Completed the changes*************************************************************************************************************************************************

 

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }

 

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        address owner = _msgSender();

        _approve(owner, spender, amount);

        return true;

    }

 

    function transferFrom(

        address from,
        address to,
        uint256 amount

    ) public virtual override returns (bool) {

        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

 

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

 

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");

        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;

    }

 

    function _transfer(

        address from,
        address to,
        uint256 amount

    ) internal virtual {

        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        
        unchecked {
            _balances[from] = fromBalance - amount;
        }

        _balances[to] += amount;
        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);

    }

 

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
       _afterTokenTransfer(address(0), account, amount);

    }

 

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");

        unchecked {

            _balances[account] = accountBalance - amount;

        }

        _totalSupply -= amount;
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);

    }

 

    function _approve(

        address owner,

        address spender,

        uint256 amount

    ) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");

 

        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }

 

    function _spendAllowance(

        address owner,

        address spender,

        uint256 amount

    ) internal virtual {

       

        uint256 currentAllowance = allowance(owner, spender);

        if (currentAllowance != type(uint256).max) {

            require(currentAllowance >= amount, "ERC20: insufficient allowance");

            unchecked {

                _approve(owner, spender, currentAllowance - amount);

            }

        }

    }

    function _beforeTokenTransfer(

        address from,
        address to,
        uint256 amount

    ) internal virtual {}

 

    function _afterTokenTransfer(

        address from,
        address to,
        uint256 amount

    ) internal virtual {}

}

 

// //Started changes*************************************************************************************************

// contract CSKToken is ERC20 {

//     constructor(uint256 initialSupply) ERC20("Chaitanya", "CSKc") {

//         uint256 totalsupply = initialSupply*10**18;//18 decimals same as eth for reference

//         _mint(msg.sender, totalsupply);

//     }

// }

// //Ended changes****************************************************************************************************
